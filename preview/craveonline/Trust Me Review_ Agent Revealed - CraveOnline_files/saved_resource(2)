(function(){var $=jQuery;var $iframe=$("#chartbeatIframe");window.updateIframe=function(){var h=$(window).height();$iframe.height(h);}
if($iframe.length>0){window.updateIframe();}}(window));
;(function(win){function readCookie(name){var nameEQ=name+"=";var ca=document.cookie.split(';');for(var i=0;i<ca.length;i++){var c=ca[i];while(c.charAt(0)===' '){c=c.substring(1,c.length);}
if(c.indexOf(nameEQ)===0){return c.substring(nameEQ.length,c.length);}}
return null;}
var $=win.jQuery,country_code=readCookie('gn_country');if(country_code==='AU'){var template=$('#js-plista-template');$('.js-plista').append(template.html());}}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB||{};PB.Core=(function(){var modules={};return{register:function(moduleName,moduleFn){if(typeof modules[moduleName]==='undefined'){modules[moduleName]=moduleFn;}else{throw'Module '+moduleName+' already registered';}},start:function(moduleName){var moduleInstance,args;if(typeof modules[moduleName]==='function'){moduleInstance=modules[moduleName]($(this));if(typeof moduleInstance.init==='function'){args=Array.prototype.slice.call(arguments,1);moduleInstance.init.apply(moduleInstance,args);}else{throw'Module '+moduleName+' doesn\'t contain an init method';}}else{throw'Module '+moduleName+' doesn\'t exist or is not a valid function';}}};}());win.PB=PB;}(window));
;(function(win){var Modernizr=win.Modernizr,CR=win.CR||{};CR.mq='';if(Modernizr.mq('only screen and (max-width: 47.9375em)')){CR.mq='mobile';}else if(Modernizr.mq('only screen and (max-width: 61.1875em)')){CR.mq='tablet';}else{CR.mq='desktop';}
win.CR=CR;}(window));
;(function(){var supports=(function(){var supports={};var html;var work=this.document.createElement('div');html="<P><I></P></I>";work.innerHTML=html;supports.tagSoup=work.innerHTML!==html;work.innerHTML="<P><i><P></P></i></P>";supports.selfClose=work.childNodes.length===2;return supports;})();var startTag=/^<([\-A-Za-z0-9_]+)((?:\s+[\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/;var endTag=/^<\/([\-A-Za-z0-9_]+)[^>]*>/;var attr=/([\-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;var fillAttr=/^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noresize|noshade|nowrap|readonly|selected)$/i;var DEBUG=false;function htmlParser(stream,options){stream=stream||'';options=options||{};for(var key in supports){if(supports.hasOwnProperty(key)){if(options.autoFix){options['fix_'+key]=true;}
options.fix=options.fix||options['fix_'+key];}}
var stack=[];var append=function(str){stream+=str;};var prepend=function(str){stream=str+stream;};var detect={comment:/^<!--/,endTag:/^<\//,atomicTag:/^<\s*(script|style|noscript|iframe|textarea)[\s>]/i,startTag:/^</,chars:/^[^<]/};var reader={comment:function(){var index=stream.indexOf("-->");if(index>=0){return{content:stream.substr(4,index),length:index+3};}},endTag:function(){var match=stream.match(endTag);if(match){return{tagName:match[1],length:match[0].length};}},atomicTag:function(){var start=reader.startTag();if(start){var rest=stream.slice(start.length);if(rest.match(new RegExp("<\/\\s*"+start.tagName+"\\s*>","i"))){var match=rest.match(new RegExp("([\\s\\S]*?)<\/\\s*"+start.tagName+"\\s*>","i"));if(match){return{tagName:start.tagName,attrs:start.attrs,content:match[1],length:match[0].length+start.length};}}}},startTag:function(){var match=stream.match(startTag);if(match){var attrs={};match[2].replace(attr,function(match,name){var value=arguments[2]||arguments[3]||arguments[4]||fillAttr.test(name)&&name||null;attrs[name]=value;});return{tagName:match[1],attrs:attrs,unary:!!match[3],length:match[0].length};}},chars:function(){var index=stream.indexOf("<");return{length:index>=0?index:stream.length};}};var readToken=function(){for(var type in detect){if(detect[type].test(stream)){if(DEBUG){console.log('suspected '+type);}
var token=reader[type]();if(token){if(DEBUG){console.log('parsed '+type,token);}
token.type=token.type||type;token.text=stream.substr(0,token.length);stream=stream.slice(token.length);return token;}
return null;}}};var readTokens=function(handlers){var tok;while(tok=readToken()){if(handlers[tok.type]&&handlers[tok.type](tok)===false){return;}}};var clear=function(){var rest=stream;stream='';return rest;};var rest=function(){return stream;};if(options.fix){(function(){var EMPTY=/^(AREA|BASE|BASEFONT|BR|COL|FRAME|HR|IMG|INPUT|ISINDEX|LINK|META|PARAM|EMBED)$/i;var CLOSESELF=/^(COLGROUP|DD|DT|LI|OPTIONS|P|TD|TFOOT|TH|THEAD|TR)$/i;var stack=[];stack.last=function(){return this[this.length-1];};stack.lastTagNameEq=function(tagName){var last=this.last();return last&&last.tagName&&last.tagName.toUpperCase()===tagName.toUpperCase();};stack.containsTagName=function(tagName){for(var i=0,tok;tok=this[i];i++){if(tok.tagName===tagName){return true;}}
return false;};var correct=function(tok){if(tok&&tok.type==='startTag'){tok.unary=EMPTY.test(tok.tagName)||tok.unary;}
return tok;};var readTokenImpl=readToken;var peekToken=function(){var tmp=stream;var tok=correct(readTokenImpl());stream=tmp;return tok;};var closeLast=function(){var tok=stack.pop();prepend('</'+tok.tagName+'>');};var handlers={startTag:function(tok){var tagName=tok.tagName;if(tagName.toUpperCase()==='TR'&&stack.lastTagNameEq('TABLE')){prepend('<TBODY>');prepareNextToken();}else if(options.fix_selfClose&&CLOSESELF.test(tagName)&&stack.containsTagName(tagName)){if(stack.lastTagNameEq(tagName)){closeLast();}else{prepend('</'+tok.tagName+'>');prepareNextToken();}}else if(!tok.unary){stack.push(tok);}},endTag:function(tok){var last=stack.last();if(last){if(options.fix_tagSoup&&!stack.lastTagNameEq(tok.tagName)){closeLast();}else{stack.pop();}}else if(options.fix_tagSoup){skipToken();}}};var skipToken=function(){readTokenImpl();prepareNextToken();};var prepareNextToken=function(){var tok=peekToken();if(tok&&handlers[tok.type]){handlers[tok.type](tok);}};readToken=function(){prepareNextToken();return correct(readTokenImpl());};})();}
return{append:append,readToken:readToken,readTokens:readTokens,clear:clear,rest:rest,stack:stack};}
htmlParser.supports=supports;htmlParser.tokenToString=function(tok){var handler={comment:function(tok){return'<--'+tok.content+'-->';},endTag:function(tok){return'</'+tok.tagName+'>';},atomicTag:function(tok){console.log(tok);return handler.startTag(tok)+
tok.content+
handler.endTag(tok);},startTag:function(tok){var str='<'+tok.tagName;for(var key in tok.attrs){var val=tok.attrs[key];str+=' '+key+'="'+(val?val.replace(/(^|[^\\])"/g,'$1\\\"'):'')+'"';}
return str+(tok.unary?'/>':'>');},chars:function(tok){return tok.text;}};return handler[tok.type](tok);};htmlParser.escapeAttributes=function(attrs){var escapedAttrs={};for(var name in attrs){var value=attrs[name];escapedAttrs[name]=value&&value.replace(/(^|[^\\])"/g,'$1\\\"');}
return escapedAttrs;};for(var key in supports){htmlParser.browserHasFlaw=htmlParser.browserHasFlaw||(!supports[key])&&key;}
this.htmlParser=htmlParser;})();
;/* Asynchronously write javascript, even with document.write., v1.1.2 https://github.com/krux/postscribe
Copyright (c) 2013 Derek Brans, MIT license https://github.com/krux/postscribe/blob/master/LICENSE */
(function(){function o(o,u){o=o||"",u=u||{};for(var a in e)e.hasOwnProperty(a)&&(u.autoFix&&(u["fix_"+a]=!0),u.fix=u.fix||u["fix_"+a]);var f=[],l=function(e){o+=e},c=function(e){o=e+o},h={comment:/^<!--/,endTag:/^<\//,atomicTag:/^<\s*(script|style|noscript|iframe|textarea)[\s>]/i,startTag:/^</,chars:/^[^<]/},p={comment:function(){var e=o.indexOf("-->");if(e>=0)return{content:o.substr(4,e),length:e+3}},endTag:function(){var e=o.match(n);if(e)return{tagName:e[1],length:e[0].length}},atomicTag:function(){var e=p.startTag();if(e){var t=o.slice(e.length);if(t.match(new RegExp("</\\s*"+e.tagName+"\\s*>","i"))){var n=t.match(new RegExp("([\\s\\S]*?)</\\s*"+e.tagName+"\\s*>","i"));if(n)return{tagName:e.tagName,attrs:e.attrs,content:n[1],length:n[0].length+e.length}}}},startTag:function(){var e=o.match(t);if(e){var n={};return e[2].replace(r,function(e,t){var r=arguments[2]||arguments[3]||arguments[4]||i.test(t)&&t||null;n[t]=r}),{tagName:e[1],attrs:n,unary:!!e[3],length:e[0].length}}},chars:function(){var e=o.indexOf("<");return{length:e>=0?e:o.length}}},d=function(){for(var e in h)if(h[e].test(o)){s&&console.log("suspected "+e);var t=p[e]();return t?(s&&console.log("parsed "+e,t),t.type=t.type||e,t.text=o.substr(0,t.length),o=o.slice(t.length),t):null}},v=function(e){var t;while(t=d())if(e[t.type]&&e[t.type](t)===!1)return},m=function(){var e=o;return o="",e},g=function(){return o};return u.fix&&function(){var e=/^(AREA|BASE|BASEFONT|BR|COL|FRAME|HR|IMG|INPUT|ISINDEX|LINK|META|PARAM|EMBED)$/i,t=/^(COLGROUP|DD|DT|LI|OPTIONS|P|TD|TFOOT|TH|THEAD|TR)$/i,n=[];n.last=function(){return this[this.length-1]},n.lastTagNameEq=function(e){var t=this.last();return t&&t.tagName&&t.tagName.toUpperCase()===e.toUpperCase()},n.containsTagName=function(e){for(var t=0,n;n=this[t];t++)if(n.tagName===e)return!0;return!1};var r=function(t){return t&&t.type==="startTag"&&(t.unary=e.test(t.tagName)||t.unary),t},i=d,s=function(){var e=o,t=r(i());return o=e,t},a=function(){var e=n.pop();c("</"+e.tagName+">")},f={startTag:function(e){var r=e.tagName;r.toUpperCase()==="TR"&&n.lastTagNameEq("TABLE")?(c("<TBODY>"),h()):u.fix_selfClose&&t.test(r)&&n.containsTagName(r)?n.lastTagNameEq(r)?a():(c("</"+e.tagName+">"),h()):e.unary||n.push(e)},endTag:function(e){var t=n.last();t?u.fix_tagSoup&&!n.lastTagNameEq(e.tagName)?a():n.pop():u.fix_tagSoup&&l()}},l=function(){i(),h()},h=function(){var e=s();e&&f[e.type]&&f[e.type](e)};d=function(){return h(),r(i())}}(),{append:l,readToken:d,readTokens:v,clear:m,rest:g,stack:f}}var e=function(){var e={},t,n=this.document.createElement("div");return t="<P><I></P></I>",n.innerHTML=t,e.tagSoup=n.innerHTML!==t,n.innerHTML="<P><i><P></P></i></P>",e.selfClose=n.childNodes.length===2,e}(),t=/^<([\-A-Za-z0-9_]+)((?:\s+[\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,n=/^<\/([\-A-Za-z0-9_]+)[^>]*>/,r=/([\-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g,i=/^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noresize|noshade|nowrap|readonly|selected)$/i,s=!1;o.supports=e,o.tokenToString=function(e){var t={comment:function(e){return"<--"+e.content+"-->"},endTag:function(e){return"</"+e.tagName+">"},atomicTag:function(e){return console.log(e),t.startTag(e)+e.content+t.endTag(e)},startTag:function(e){var t="<"+e.tagName;for(var n in e.attrs){var r=e.attrs[n];t+=" "+n+'="'+(r?r.replace(/(^|[^\\])"/g,'$1\\"'):"")+'"'}return t+(e.unary?"/>":">")},chars:function(e){return e.text}};return t[e.type](e)},o.escapeAttributes=function(e){var t={};for(var n in e){var r=e[n];t[n]=r&&r.replace(/(^|[^\\])"/g,'$1\\"')}return t};for(var u in e)o.browserHasFlaw=o.browserHasFlaw||!e[u]&&u;this.htmlParser=o})(),function(){function i(){}function s(e){return"function"==typeof e}function o(e,t,n){var r,i=e&&e.length||0;for(r=0;r<i;r++)t.call(n,e[r],r)}function u(e,t,n){var r;for(r in e)e.hasOwnProperty(r)&&t.call(n,r,e[r])}function a(e,t){return u(t,function(t,n){e[t]=n}),e}function f(e,t){return e=e||{},u(t,function(t,n){e[t]==null&&(e[t]=n)}),e}function l(e){try{return r.call(e)}catch(t){var n=[];return o(e,function(e){n.push(e)}),n}}function c(e){return/^script$/i.test(e.tagName)}var e=this;if(e.postscribe)return;var t=!0,n=!1,r=Array.prototype.slice,h=function(){function r(e,n,r){var i=t+n;if(arguments.length===2){var s=e.getAttribute(i);return s==null?s:String(s)}r!=null&&r!==""?e.setAttribute(i,r):e.removeAttribute(i)}function i(t,n){var i=t.ownerDocument;a(this,{root:t,options:n,win:i.defaultView||i.parentWindow,doc:i,parser:e.htmlParser("",{autoFix:!0}),actuals:[t],proxyHistory:"",proxyRoot:i.createElement(t.nodeName),scriptStack:[],writeQueue:[]}),r(this.proxyRoot,"proxyof",0)}var t="data-ps-";return i.prototype.write=function(){[].push.apply(this.writeQueue,arguments);var e;while(!this.deferredRemote&&this.writeQueue.length)e=this.writeQueue.shift(),s(e)?this.callFunction(e):this.writeImpl(e)},i.prototype.callFunction=function(e){var t={type:"function",value:e.name||e.toString()};this.onScriptStart(t),e.call(this.win,this.doc),this.onScriptDone(t)},i.prototype.writeImpl=function(e){this.parser.append(e);var t,n=[];while((t=this.parser.readToken())&&!c(t))n.push(t);this.writeStaticTokens(n),t&&this.handleScriptToken(t)},i.prototype.writeStaticTokens=function(e){var t=this.buildChunk(e);if(!t.actual)return;return t.html=this.proxyHistory+t.actual,this.proxyHistory+=t.proxy,this.proxyRoot.innerHTML=t.html,n&&(t.proxyInnerHTML=this.proxyRoot.innerHTML),this.walkChunk(),n&&(t.actualInnerHTML=this.root.innerHTML),t},i.prototype.buildChunk=function(e){var n=this.actuals.length,r=[],i=[],s=[];return o(e,function(e){r.push(e.text);if(e.attrs){if(!/^noscript$/i.test(e.tagName)){var o=n++;i.push(e.text.replace(/(\/?>)/," "+t+"id="+o+" $1")),e.attrs.id!=="ps-script"&&s.push(e.type==="atomicTag"?"":"<"+e.tagName+" "+t+"proxyof="+o+(e.unary?"/>":">"))}}else i.push(e.text),s.push(e.type==="endTag"?e.text:"")}),{tokens:e,raw:r.join(""),actual:i.join(""),proxy:s.join("")}},i.prototype.walkChunk=function(){var e,t=[this.proxyRoot];while((e=t.shift())!=null){var n=e.nodeType===1,i=n&&r(e,"proxyof");if(!i){n&&(this.actuals[r(e,"id")]=e,r(e,"id",null));var s=e.parentNode&&r(e.parentNode,"proxyof");s&&this.actuals[s].appendChild(e)}t.unshift.apply(t,l(e.childNodes))}},i.prototype.handleScriptToken=function(e){var t=this.parser.clear();t&&this.writeQueue.unshift(t),e.src=e.attrs.src||e.attrs.SRC,e.src&&this.scriptStack.length?this.deferredRemote=e:this.onScriptStart(e);var n=this;this.writeScriptToken(e,function(){n.onScriptDone(e)})},i.prototype.onScriptStart=function(e){e.outerWrites=this.writeQueue,this.writeQueue=[],this.scriptStack.unshift(e)},i.prototype.onScriptDone=function(e){if(e!==this.scriptStack[0]){this.options.error({message:"Bad script nesting or script finished twice"});return}this.scriptStack.shift(),this.write.apply(this,e.outerWrites),!this.scriptStack.length&&this.deferredRemote&&(this.onScriptStart(this.deferredRemote),this.deferredRemote=null)},i.prototype.writeScriptToken=function(e,t){var n=this.buildScript(e);e.src&&(n.src=e.src,this.scriptLoadHandler(n,t));try{this.insertScript(n),e.src||t()}catch(r){this.options.error(r),t()}},i.prototype.buildScript=function(e){var t=this.doc.createElement(e.tagName);return u(e.attrs,function(e,n){t.setAttribute(e,n)}),e.content&&(t.text=e.content),t},i.prototype.insertScript=function(e){this.writeImpl('<span id="ps-script"/>');var t=this.doc.getElementById("ps-script");t.parentNode.replaceChild(e,t)},i.prototype.scriptLoadHandler=function(e,t){function n(){e=e.onload=e.onreadystatechange=e.onerror=null,t()}var r=this.options.error;a(e,{onload:function(){n()},onreadystatechange:function(){/^(loaded|complete)$/.test(e.readyState)&&n()},onerror:function(){r({message:"remote script failed "+e.src}),n()}})},i}(),p=function(){function o(){var e=n.shift();e&&(e.stream=u.apply(null,e))}function u(e,n,s){function c(e){e=s.beforeWrite(e),r.write(e),s.afterWrite(e)}r=new h(e,s),r.id=t++,r.name=s.name||r.id,l.streams[r.name]=r;var u=e.ownerDocument,f={write:u.write,writeln:u.writeln};a(u,{write:c,writeln:function(e){c(e+"\n")}});var p=r.win.onerror||i;return r.win.onerror=function(e,t,n){s.error({msg:e+" - "+t+":"+n}),p.apply(r.win,arguments)},r.write(n,function(){a(u,f),r.win.onerror=p,s.done(),r=null,o()}),r}function l(t,u,a){s(a)&&(a={done:a}),a=f(a,{done:i,error:function(e){throw e},beforeWrite:function(e){return e},afterWrite:i}),t=/^#/.test(t)?e.document.getElementById(t.substr(1)):t.jquery?t[0]:t;var l=[t,u,a];return t.postscribe={cancel:function(){l.stream?l.stream.abort():l[1]=i}},n.push(l),r||o(),t.postscribe}var t=0,n=[],r=null;return a(l,{streams:{},queue:n,WriteStream:h})}();e.postscribe=p}();
;(function(win){var $=win.jQuery,PB=win.PB||{},postscribe=win.postscribe,getParameterByName=function(param){var regex=new RegExp("[\\?&]"+param+"=([^&#]*)"),results=regex.exec(win.location.search);return results===null?"":decodeURIComponent(results[1].replace(/\+/g," "));};PB.SidebarLoader=(function(){var sidebars=[];return{getById:function(sidebarId,postId,queryParams){var data=$.extend({},{action:'get_sidebar','sidebar':sidebarId,'gnad_type':getParameterByName('gnad_type'),'post_id':postId},queryParams,PB.wpQueryVars);return $.ajax({url:'/wp-admin/admin-ajax.php',data:data});},load:function(sidebarId,$container,fnCallback){var self=this;sidebars.push(this.getById(sidebarId).then(function(sidebarHtml){self.renderSidebar(sidebarHtml,$container,fnCallback);}));},loadByPostId:function(sidebarId,postId,options){var self=this;sidebars.push(this.getById(sidebarId,postId,options.queryParams).then(function(sidebarHtml){self.renderSidebar(sidebarHtml,options.$container,options.fnCallback);}));},renderSidebar:function(sidebarHtml,$container,fnCallback){try{postscribe($container,sidebarHtml,fnCallback);}catch(error){if(typeof fnCallback==='function'){fnCallback(error);}}},loadWithPromise:function(sidebarId,$container,fnCallback){var dfd=$.Deferred();this.getById(sidebarId).then(function(sidebarHtml){try{postscribe($container,sidebarHtml,function(){dfd.resolve();});}catch(error){if(typeof fnCallback==='function'){dfd.reject(error);}}});return dfd.promise();},onLoad:function(){return $.when.apply($,sidebars);}};}());win.PB=PB;}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB,SidebarLoader=PB.SidebarLoader,CR=win.CR;PB.Core.register('body-ads',function(){var $reskin,$dcopt;return{init:function(){if(CR.mq==='desktop'){$reskin=$('#js-reskin-ad');$dcopt=$('#js-dcopt-ad');SidebarLoader.load('reskin',$reskin);SidebarLoader.load('dcopt',$dcopt);}}};});}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB,SidebarLoader=PB.SidebarLoader,CR=win.CR;PB.Core.register('leaderboard-ad',function(){var sidebarID={'mobile':'leaderboard_mobile','tablet':'leaderboard_tablet','desktop':'leaderboard'},$leaderboard;return{init:function(){if($leaderboard===undefined){$leaderboard=$('#js-leaderboard');}
SidebarLoader.load(sidebarID[CR.mq],$leaderboard);}};});}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB,focusOnSearchField;PB.Searchform={};PB.Searchform.$ele={topMagnifierButton:$('#js-toggle-search'),searchWrapper:$('.top-search'),topSearchField:$('.search-field'),sform:$('.search-form')};focusOnSearchField=function(){PB.Searchform.$ele.topSearchField.focus();};PB.Searchform.isHidden=function(){return!!PB.Searchform.$ele.searchWrapper.data('is-hidden');};PB.Searchform.mobiletoggle=function(){if(PB.Searchform.isHidden()){PB.Searchform.mshow(true);}else{PB.Searchform.mhide();}};PB.Searchform.mhide=function(){PB.Searchform.$ele.searchWrapper.data('is-hidden',true);PB.Searchform.$ele.searchWrapper.hide();};PB.Searchform.mshow=function(focusOnField){if(focusOnField){focusOnSearchField();}
PB.Searchform.$ele.searchWrapper.data('is-hidden',false);PB.Searchform.$ele.searchWrapper.show();};PB.Searchform.$ele.searchWrapper.data('is-hidden',true);PB.Core.register('searchform',function(){return{init:function(){PB.Searchform.$ele.topMagnifierButton.on('click',function(e){e.preventDefault();PB.Searchform.mobiletoggle();});}};});}(window));
;!function(a){var b=function(b,c){this.options=a.extend({},a.fn.affix.defaults,c),this.$window=a(window).on("scroll.affix.data-api",a.proxy(this.checkPosition,this)).on("click.affix.data-api",a.proxy(function(){setTimeout(a.proxy(this.checkPosition,this),1)},this)),this.$element=a(b),this.checkPosition()};b.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var b=a(document).height(),c=this.$window.scrollTop(),d=this.$element.offset(),e=this.options.offset,f=e.bottom,g=e.top,h="affix affix-top affix-bottom",i;typeof e!="object"&&(f=g=e),typeof g=="function"&&(g=e.top()),typeof f=="function"&&(f=e.bottom()),i=this.unpin!=null&&c+this.unpin<=d.top?!1:f!=null&&d.top+this.$element.height()>=b-f?"bottom":g!=null&&c<=g?"top":!1;if(this.affixed===i)return;this.affixed=i,this.unpin=i=="bottom"?d.top-c:null,this.$element.removeClass(h).addClass("affix"+(i?"-"+i:""))};var c=a.fn.affix;a.fn.affix=function(c){return this.each(function(){var d=a(this),e=d.data("affix"),f=typeof c=="object"&&c;e||d.data("affix",e=new b(this,f)),typeof c=="string"&&e[c]()})},a.fn.affix.Constructor=b,a.fn.affix.defaults={offset:0},a.fn.affix.noConflict=function(){return a.fn.affix=c,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var b=a(this),c=b.data();c.offset=c.offset||{},c.offsetBottom&&(c.offset.bottom=c.offsetBottom),c.offsetTop&&(c.offset.top=c.offsetTop),b.affix(c)})})}(window.jQuery)
;(function(win){'use strict';var $=win.jQuery,PB=win.PB;PB.Core.register('navigation',function(){var Navigation={$header:'',$fixedHeader:''};Navigation.getHeight=function(){return this.$fixedHeader.height();};Navigation.setHeight=function(height){this.$header.height(height);};Navigation.affix=function(options){this.$fixedHeader.affix(options);};Navigation.init=function(){if(this.$header===''){this.$header=$('.js-header');}
if(this.$fixedHeader===''){this.$fixedHeader=$('.js-fixed-header');}
this.setHeight(this.getHeight());this.affix({offset:{top:1}});};return{init:function(){Navigation.init();}};});}(window));
;(function(win){var $=win.jQuery;var CR=win.CR||{};CR.UI=CR.UI||{};CR.UI.CompositeMenu=function(options){var defaults={callback:undefined};var config=$.extend({},defaults,options);if(!config.$element instanceof $){throw new Error('Element must be a jQuery object.');}
this.$element=config.$element;this.children=[];this.callback=config.callback;};CR.UI.CompositeMenu.prototype={add:function(child){this.children.push(child);},execute:function(){if(typeof this.callback==='function'){this.callback.call(this);}
for(var i=0,len=this.children.length;i<len;i++){this.getChild(i).execute();}},getChild:function(index){return this.children[index];},getElement:function(){return this.$element;},remove:function(child){for(var i=0,len=this.children.length;i<len;i++){if(this.children[i]===child){this.children.splice(i,1);break;}}}};}(window));
;(function(win){var $=win.jQuery,CR=win.CR||{};CR.UI=CR.UI||{};CR.UI.MenuItem=function(options){var defaults={callback:undefined};var config=$.extend({},defaults,options);if(!config.$element instanceof $){throw new Error('Element must be a jQuery object.');}
this.$element=config.$element;this.callback=config.callback;};CR.UI.MenuItem.prototype={add:function(){},execute:function(){if(typeof this.callback==='function'){this.callback.call(this);}},getChild:function(){},getElement:function(){return this.$element;}};}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB,CR=win.CR,activeElement;PB.MobileNavigation={};PB.MobileNavigation.$ele={body:$('body'),mainNavigation:$('.main-menu-container')};PB.MobileNavigation.isHidden=function(){return!!PB.MobileNavigation.$ele.mainNavigation.data('is-hidden');};PB.MobileNavigation.toggle=function(){var isMenuHidden=PB.MobileNavigation.isHidden();PB.MobileNavigation.$ele.body.toggleClass('offset');if(PB.MobileNavigation.$ele.body.hasClass('offset')){PB.MobileNavigation.$ele.body.removeClass('offsetoff');}else{PB.MobileNavigation.$ele.body.addClass('offsetoff');}
PB.MobileNavigation.$ele.mainNavigation.toggleClass('offset');PB.MobileNavigation.$ele.mainNavigation.data('is-hidden',!isMenuHidden);};PB.MobileNavigation.$ele.mainNavigation.data('is-hidden',true);function getClosure(menuComponent){return function(){return menuComponent;};}
function isTouchDevice(){return true===('ontouchstart'in win||win.DocumentTouch&&document instanceof win.DocumentTouch);}
function setUpNavigationMenu(element){var $element=element instanceof $?element:$(element);var menuComponent;var elementIsNode=$element.is('ul')||($element.is('li')&&$element.has('ul').length>0);if(elementIsNode){menuComponent=new CR.UI.CompositeMenu({$element:$element});if($element.is('ul')){$element.children('li').each(function(){menuComponent.add(setUpNavigationMenu(this));});}
else if($element.is('li')){var fn=getClosure(menuComponent);$element.children('a').on('click',function(e){var item=fn();if(!$element.hasClass('menu-item-active')){if(activeElement){activeElement.execute();activeElement.getElement().removeClass('menu-item-active');}
$element.addClass('menu-item-active');activeElement=item;e.preventDefault();}});menuComponent.add(setUpNavigationMenu($element.find('ul:first')));}}
else{menuComponent=new CR.UI.MenuItem({$element:$element});}
return menuComponent;}
PB.Core.register('mobile-navigation',function(){return{init:function(deviceMode){$('#js-toggle-menu').on('click',function(e){e.preventDefault();PB.MobileNavigation.toggle();});if(deviceMode!=='mobile'&&isTouchDevice()){setUpNavigationMenu($('#menu-main-menu'));}}};});}(window));
;/**
 * BxSlider v4.1.1 - Fully loaded, responsive content slider
 * http://bxslider.com
 *
 * Copyright 2013, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com
 * Written while drinking Belgian ales and listening to jazz
 *
 * Released under the MIT license - http://opensource.org/licenses/MIT
 */

;(function($){

    var plugin = {};

    var defaults = {

        // GENERAL
        mode: 'horizontal',
        slideSelector: '',
        infiniteLoop: true,
        hideControlOnEnd: false,
        speed: 500,
        easing: null,
        slideMargin: 0,
        startSlide: 0,
        randomStart: false,
        captions: false,
        ticker: false,
        tickerHover: false,
        adaptiveHeight: false,
        adaptiveHeightSpeed: 500,
        video: false,
        useCSS: true,
        preloadImages: 'visible',
        responsive: true,

        // TOUCH
        touchEnabled: true,
        swipeThreshold: 50,
        oneToOneTouch: true,
        preventDefaultSwipeX: true,
        preventDefaultSwipeY: false,

        // PAGER
        pager: true,
        pagerType: 'full',
        pagerShortSeparator: ' / ',
        pagerSelector: null,
        buildPager: null,
        pagerCustom: null,

        // CONTROLS
        controls: true,
        nextText: 'Next',
        prevText: 'Prev',
        nextSelector: null,
        prevSelector: null,
        autoControls: false,
        startText: 'Start',
        stopText: 'Stop',
        autoControlsCombine: false,
        autoControlsSelector: null,

        // AUTO
        auto: false,
        pause: 4000,
        autoStart: true,
        autoDirection: 'next',
        autoHover: false,
        autoDelay: 0,

        // CAROUSEL
        minSlides: 1,
        maxSlides: 1,
        moveSlides: 0,
        slideWidth: 0,

        // CALLBACKS
        onSliderLoad: function() {},
        onSlideBefore: function() {},
        onSlideAfter: function() {},
        onSlideNext: function() {},
        onSlidePrev: function() {}
    }

    $.fn.bxSlider = function(options){

        if(this.length == 0) return this;

        // support mutltiple elements
        if(this.length > 1){
            this.each(function(){$(this).bxSlider(options)});
            return this;
        }

        // create a namespace to be used throughout the plugin
        var slider = {};
        // set a reference to our slider element
        var el = this;
        plugin.el = this;

        /**
         * Makes slideshow responsive
         */
        // first get the original window dimens (thanks alot IE)
        var windowWidth = $(window).width();
        var windowHeight = $(window).height();



        /**
         * ===================================================================================
         * = PRIVATE FUNCTIONS
         * ===================================================================================
         */

        /**
         * Initializes namespace settings to be used throughout plugin
         */
        var init = function(){
            // merge user-supplied options with the defaults
            slider.settings = $.extend({}, defaults, options);
            // parse slideWidth setting
            slider.settings.slideWidth = parseInt(slider.settings.slideWidth);
            // store the original children
            slider.children = el.children(slider.settings.slideSelector);
            // check if actual number of slides is less than minSlides / maxSlides
            if(slider.children.length < slider.settings.minSlides) slider.settings.minSlides = slider.children.length;
            if(slider.children.length < slider.settings.maxSlides) slider.settings.maxSlides = slider.children.length;
            // if random start, set the startSlide setting to random number
            if(slider.settings.randomStart) slider.settings.startSlide = Math.floor(Math.random() * slider.children.length);
            // store active slide information
            slider.active = { index: slider.settings.startSlide }
            // store if the slider is in carousel mode (displaying / moving multiple slides)
            slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1;
            // if carousel, force preloadImages = 'all'
            if(slider.carousel) slider.settings.preloadImages = 'all';
            // calculate the min / max width thresholds based on min / max number of slides
            // used to setup and update carousel slides dimensions
            slider.minThreshold = (slider.settings.minSlides * slider.settings.slideWidth) + ((slider.settings.minSlides - 1) * slider.settings.slideMargin);
            slider.maxThreshold = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
            // store the current state of the slider (if currently animating, working is true)
            slider.working = false;
            // initialize the controls object
            slider.controls = {};
            // initialize an auto interval
            slider.interval = null;
            // determine which property to use for transitions
            slider.animProp = slider.settings.mode == 'vertical' ? 'top' : 'left';
            // determine if hardware acceleration can be used
            slider.usingCSS = slider.settings.useCSS && slider.settings.mode != 'fade' && (function(){
                // create our test div element
                var div = document.createElement('div');
                // css transition properties
                var props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];
                // test for each property
                for(var i in props){
                    if(div.style[props[i]] !== undefined){
                        slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();
                        slider.animProp = '-' + slider.cssPrefix + '-transform';
                        return true;
                    }
                }
                return false;
            }());
            // if vertical mode always make maxSlides and minSlides equal
            if(slider.settings.mode == 'vertical') slider.settings.maxSlides = slider.settings.minSlides;
            // save original style data
            el.data("origStyle", el.attr("style"));
            el.children(slider.settings.slideSelector).each(function() {
              $(this).data("origStyle", $(this).attr("style"));
            });
            // perform all DOM / CSS modifications
            setup();
        }

        /**
         * Performs all DOM and CSS modifications
         */
        var setup = function(){
            // wrap el in a wrapper
            el.wrap('<div class="bx-wrapper"><div class="bx-viewport"></div></div>');
            // store a namspace reference to .bx-viewport
            slider.viewport = el.parent();
            // add a loading div to display while images are loading
            slider.loader = $('<div class="bx-loading" />');
            slider.viewport.prepend(slider.loader);
            // set el to a massive width, to hold any needed slides
            // also strip any margin and padding from el
            el.css({
                width: slider.settings.mode == 'horizontal' ? (slider.children.length * 100 + 215) + '%' : 'auto',
                position: 'relative'
            });
            // if using CSS, add the easing property
            if(slider.usingCSS && slider.settings.easing){
                el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing);
            // if not using CSS and no easing value was supplied, use the default JS animation easing (swing)
            }else if(!slider.settings.easing){
                slider.settings.easing = 'swing';
            }
            var slidesShowing = getNumberSlidesShowing();
            // make modifications to the viewport (.bx-viewport)
            slider.viewport.css({
                width: '100%',
                overflow: 'hidden',
                position: 'relative'
            });
            slider.viewport.parent().css({
                maxWidth: getViewportMaxWidth()
            });
            // make modification to the wrapper (.bx-wrapper)
            if(!slider.settings.pager) {
                slider.viewport.parent().css({
                margin: '0 auto 0px'
                });
            }
            // apply css to all slider children
            slider.children.css({
                'float': slider.settings.mode == 'horizontal' ? 'left' : 'none',
                listStyle: 'none',
                position: 'relative'
            });
            // apply the calculated width after the float is applied to prevent scrollbar interference
            slider.children.css('width', getSlideWidth());
            // if slideMargin is supplied, add the css
            if(slider.settings.mode == 'horizontal' && slider.settings.slideMargin > 0) slider.children.css('marginRight', slider.settings.slideMargin);
            if(slider.settings.mode == 'vertical' && slider.settings.slideMargin > 0) slider.children.css('marginBottom', slider.settings.slideMargin);
            // if "fade" mode, add positioning and z-index CSS
            if(slider.settings.mode == 'fade'){
                slider.children.css({
                    position: 'absolute',
                    zIndex: 0,
                    display: 'none'
                });
                // prepare the z-index on the showing element
                slider.children.eq(slider.settings.startSlide).css({zIndex: 50, display: 'block'});
            }
            // create an element to contain all slider controls (pager, start / stop, etc)
            slider.controls.el = $('<div class="bx-controls" />');
            // if captions are requested, add them
            if(slider.settings.captions) appendCaptions();
            // check if startSlide is last slide
            slider.active.last = slider.settings.startSlide == getPagerQty() - 1;
            // if video is true, set up the fitVids plugin
            if(slider.settings.video) el.fitVids();
            // set the default preload selector (visible)
            var preloadSelector = slider.children.eq(slider.settings.startSlide);
            if (slider.settings.preloadImages == "all") preloadSelector = slider.children;
            // only check for control addition if not in "ticker" mode
            if(!slider.settings.ticker){
                // if pager is requested, add it
                if(slider.settings.pager) appendPager();
                // if controls are requested, add them
                if(slider.settings.controls) appendControls();
                // if auto is true, and auto controls are requested, add them
                if(slider.settings.auto && slider.settings.autoControls) appendControlsAuto();
                // if any control option is requested, add the controls wrapper
                if(slider.settings.controls || slider.settings.autoControls || slider.settings.pager) slider.viewport.after(slider.controls.el);
            // if ticker mode, do not allow a pager
            }else{
                slider.settings.pager = false;
            }
            // preload all images, then perform final DOM / CSS modifications that depend on images being loaded
            loadElements(preloadSelector, start);
        }

        var loadElements = function(selector, callback){
            var total = selector.find('img, iframe').length;
            if (total == 0){
                callback();
                return;
            }
            var count = 0;
            selector.find('img, iframe').each(function(){
                $(this).one('load', function() {
                  if(++count == total) callback();
                }).each(function() {
                  if(this.complete) $(this).load();
                });
            });
        }

        /**
         * Start the slider
         */
        var start = function(){
            // if infinite loop, prepare additional slides
            if(slider.settings.infiniteLoop && slider.settings.mode != 'fade' && !slider.settings.ticker){
                var slice = slider.settings.mode == 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides;
                var sliceAppend = slider.children.slice(0, slice).clone().addClass('bx-clone');
                var slicePrepend = slider.children.slice(-slice).clone().addClass('bx-clone');
                el.append(sliceAppend).prepend(slicePrepend);
            }
            // remove the loading DOM element
            slider.loader.remove();
            // set the left / top position of "el"
            setSlidePosition();
            // if "vertical" mode, always use adaptiveHeight to prevent odd behavior
            if (slider.settings.mode == 'vertical') slider.settings.adaptiveHeight = true;
            // set the viewport height
            slider.viewport.height(getViewportHeight());
            // make sure everything is positioned just right (same as a window resize)
            el.redrawSlider();
            // onSliderLoad callback
            slider.settings.onSliderLoad(slider.active.index);
            // slider has been fully initialized
            slider.initialized = true;
            // bind the resize call to the window
            if (slider.settings.responsive) $(window).bind('resize', resizeWindow);
            // if auto is true, start the show
            if (slider.settings.auto && slider.settings.autoStart) initAuto();
            // if ticker is true, start the ticker
            if (slider.settings.ticker) initTicker();
            // if pager is requested, make the appropriate pager link active
            if (slider.settings.pager) updatePagerActive(slider.settings.startSlide);
            // check for any updates to the controls (like hideControlOnEnd updates)
            if (slider.settings.controls) updateDirectionControls();
            // if touchEnabled is true, setup the touch events
            if (slider.settings.touchEnabled && !slider.settings.ticker) initTouch();
        }

        /**
         * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value
         */
        var getViewportHeight = function(){
            var height = 0;
            // first determine which children (slides) should be used in our height calculation
            var children = $();
            // if mode is not "vertical" and adaptiveHeight is false, include all children
            if(slider.settings.mode != 'vertical' && !slider.settings.adaptiveHeight){
                children = slider.children;
            }else{
                // if not carousel, return the single active child
                if(!slider.carousel){
                    children = slider.children.eq(slider.active.index);
                // if carousel, return a slice of children
                }else{
                    // get the individual slide index
                    var currentIndex = slider.settings.moveSlides == 1 ? slider.active.index : slider.active.index * getMoveBy();
                    // add the current slide to the children
                    children = slider.children.eq(currentIndex);
                    // cycle through the remaining "showing" slides
                    for (i = 1; i <= slider.settings.maxSlides - 1; i++){
                        // if looped back to the start
                        if(currentIndex + i >= slider.children.length){
                            children = children.add(slider.children.eq(i - 1));
                        }else{
                            children = children.add(slider.children.eq(currentIndex + i));
                        }
                    }
                }
            }
            // if "vertical" mode, calculate the sum of the heights of the children
            if(slider.settings.mode == 'vertical'){
                children.each(function(index) {
                  height += $(this).outerHeight();
                });
                // add user-supplied margins
                if(slider.settings.slideMargin > 0){
                    height += slider.settings.slideMargin * (slider.settings.minSlides - 1);
                }
            // if not "vertical" mode, calculate the max height of the children
            }else{
                height = Math.max.apply(Math, children.map(function(){
                    return $(this).outerHeight(false);
                }).get());
            }
            return height;
        }

        /**
         * Returns the calculated width to be used for the outer wrapper / viewport
         */
        var getViewportMaxWidth = function(){
            var width = '100%';
            if(slider.settings.slideWidth > 0){
                if(slider.settings.mode == 'horizontal'){
                    width = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
                }else{
                    width = slider.settings.slideWidth;
                }
            }
            return width;
        }

        /**
         * Returns the calculated width to be applied to each slide
         */
        var getSlideWidth = function(){
            // start with any user-supplied slide width
            var newElWidth = slider.settings.slideWidth;
            // get the current viewport width
            var wrapWidth = slider.viewport.width();
            // if slide width was not supplied, or is larger than the viewport use the viewport width
            if(slider.settings.slideWidth == 0 ||
                (slider.settings.slideWidth > wrapWidth && !slider.carousel) ||
                slider.settings.mode == 'vertical'){
                newElWidth = wrapWidth;
            // if carousel, use the thresholds to determine the width
            }else if(slider.settings.maxSlides > 1 && slider.settings.mode == 'horizontal'){
                if(wrapWidth > slider.maxThreshold){
                    // newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.maxSlides - 1))) / slider.settings.maxSlides;
                }else if(wrapWidth < slider.minThreshold){
                    newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides;
                }
            }
            return newElWidth;
        }

        /**
         * Returns the number of slides currently visible in the viewport (includes partially visible slides)
         */
        var getNumberSlidesShowing = function(){
            var slidesShowing = 1;
            if(slider.settings.mode == 'horizontal' && slider.settings.slideWidth > 0){
                // if viewport is smaller than minThreshold, return minSlides
                if(slider.viewport.width() < slider.minThreshold){
                    slidesShowing = slider.settings.minSlides;
                // if viewport is larger than minThreshold, return maxSlides
                }else if(slider.viewport.width() > slider.maxThreshold){
                    slidesShowing = slider.settings.maxSlides;
                // if viewport is between min / max thresholds, divide viewport width by first child width
                }else{
                    var childWidth = slider.children.first().width();
                    slidesShowing = Math.floor(slider.viewport.width() / childWidth);
                }
            // if "vertical" mode, slides showing will always be minSlides
            }else if(slider.settings.mode == 'vertical'){
                slidesShowing = slider.settings.minSlides;
            }
            return slidesShowing;
        }

        /**
         * Returns the number of pages (one full viewport of slides is one "page")
         */
        var getPagerQty = function(){
            var pagerQty = 0;
            // if moveSlides is specified by the user
            if(slider.settings.moveSlides > 0){
                if(slider.settings.infiniteLoop){
                    pagerQty = slider.children.length / getMoveBy();
                }else{
                    // use a while loop to determine pages
                    var breakPoint = 0;
                    var counter = 0
                    // when breakpoint goes above children length, counter is the number of pages
                    while (breakPoint < slider.children.length){
                        ++pagerQty;
                        breakPoint = counter + getNumberSlidesShowing();
                        counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
                    }
                }
            // if moveSlides is 0 (auto) divide children length by sides showing, then round up
            }else{
                pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
            }
            return pagerQty;
        }

        /**
         * Returns the number of indivual slides by which to shift the slider
         */
        var getMoveBy = function(){
            // if moveSlides was set by the user and moveSlides is less than number of slides showing
            if(slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()){
                return slider.settings.moveSlides;
            }
            // if moveSlides is 0 (auto)
            return getNumberSlidesShowing();
        }

        /**
         * Sets the slider's (el) left or top position
         */
        var setSlidePosition = function(){
            // if last slide, not infinite loop, and number of children is larger than specified maxSlides
            if(slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop){
                if (slider.settings.mode == 'horizontal'){
                    // get the last child's position
                    var lastChild = slider.children.last();
                    var position = lastChild.position();
                    // set the left position
                    setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.width())), 'reset', 0);
                }else if(slider.settings.mode == 'vertical'){
                    // get the last showing index's position
                    var lastShowingIndex = slider.children.length - slider.settings.minSlides;
                    var position = slider.children.eq(lastShowingIndex).position();
                    // set the top position
                    setPositionProperty(-position.top, 'reset', 0);
                }
            // if not last slide
            }else{
                // get the position of the first showing slide
                var position = slider.children.eq(slider.active.index * getMoveBy()).position();
                // check for last slide
                if (slider.active.index == getPagerQty() - 1) slider.active.last = true;
                // set the repective position
                if (position != undefined){
                    if (slider.settings.mode == 'horizontal') setPositionProperty(-position.left, 'reset', 0);
                    else if (slider.settings.mode == 'vertical') setPositionProperty(-position.top, 'reset', 0);
                }
            }
        }

        /**
         * Sets the el's animating property position (which in turn will sometimes animate el).
         * If using CSS, sets the transform property. If not using CSS, sets the top / left property.
         *
         * @param value (int)
         *  - the animating property's value
         *
         * @param type (string) 'slider', 'reset', 'ticker'
         *  - the type of instance for which the function is being
         *
         * @param duration (int)
         *  - the amount of time (in ms) the transition should occupy
         *
         * @param params (array) optional
         *  - an optional parameter containing any variables that need to be passed in
         */
        var setPositionProperty = function(value, type, duration, params){
            // use CSS transform
            if(slider.usingCSS){
                // determine the translate3d value
                var propValue = slider.settings.mode == 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)';
                // add the CSS transition-duration
                el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');
                if(type == 'slide'){
                    // set the property value
                    el.css(slider.animProp, propValue);
                    // bind a callback method - executes when CSS transition completes
                    el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(){
                        // unbind the callback
                        el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
                        updateAfterSlideTransition();
                    });

                    // this is needed when the "transitionend" event doesn't fire
                    // https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions
                    setTimeout(function () {
                        updateAfterSlideTransition();
                    }, duration);
                }else if(type == 'reset'){
                    el.css(slider.animProp, propValue);
                }else if(type == 'ticker'){
                    // make the transition use 'linear'
                    el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');
                    el.css(slider.animProp, propValue);
                    // bind a callback method - executes when CSS transition completes
                    el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(){
                        // unbind the callback
                        el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
                        // reset the position
                        setPositionProperty(params['resetValue'], 'reset', 0);
                        // start the loop again
                        tickerLoop();
                    });
                }
            // use JS animate
            }else{
                var animateObj = {};
                animateObj[slider.animProp] = value;
                if(type == 'slide'){
                    el.animate(animateObj, duration, slider.settings.easing, function(){
                        updateAfterSlideTransition();
                    });
                }else if(type == 'reset'){
                    el.css(slider.animProp, value)
                }else if(type == 'ticker'){
                    el.animate(animateObj, speed, 'linear', function(){
                        setPositionProperty(params['resetValue'], 'reset', 0);
                        // run the recursive loop after animation
                        tickerLoop();
                    });
                }
            }
        }

        /**
         * Populates the pager with proper amount of pages
         */
        var populatePager = function(){
            var pagerHtml = '';
            var pagerQty = getPagerQty();
            // loop through each pager item
            for(var i=0; i < pagerQty; i++){
                var linkContent = '';
                // if a buildPager function is supplied, use it to get pager link value, else use index + 1
                if(slider.settings.buildPager && $.isFunction(slider.settings.buildPager)){
                    linkContent = slider.settings.buildPager(i);
                    slider.pagerEl.addClass('bx-custom-pager');
                }else{
                    linkContent = i + 1;
                    slider.pagerEl.addClass('bx-default-pager');
                }
                // var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;
                // add the markup to the string
                pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + '</a></div>';
            };
            // populate the pager element with pager links
            slider.pagerEl.html(pagerHtml);
        }

        /**
         * Appends the pager to the controls element
         */
        var appendPager = function(){
            if(!slider.settings.pagerCustom){
                // create the pager DOM element
                slider.pagerEl = $('<div class="bx-pager" />');
                // if a pager selector was supplied, populate it with the pager
                if(slider.settings.pagerSelector){
                    $(slider.settings.pagerSelector).html(slider.pagerEl);
                // if no pager selector was supplied, add it after the wrapper
                }else{
                    slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);
                }
                // populate the pager
                populatePager();
            }else{
                slider.pagerEl = $(slider.settings.pagerCustom);
            }
            // assign the pager click binding
            slider.pagerEl.delegate('a', 'click', clickPagerBind);
        }

        /**
         * Appends prev / next controls to the controls element
         */
        var appendControls = function(){
            slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + '</a>');
            slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + '</a>');
            // bind click actions to the controls
            slider.controls.next.bind('click', clickNextBind);
            slider.controls.prev.bind('click', clickPrevBind);
            // if nextSlector was supplied, populate it
            if(slider.settings.nextSelector){
                $(slider.settings.nextSelector).append(slider.controls.next);
            }
            // if prevSlector was supplied, populate it
            if(slider.settings.prevSelector){
                $(slider.settings.prevSelector).append(slider.controls.prev);
            }
            // if no custom selectors were supplied
            if(!slider.settings.nextSelector && !slider.settings.prevSelector){
                // add the controls to the DOM
                slider.controls.directionEl = $('<div class="bx-controls-direction" />');
                // add the control elements to the directionEl
                slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);
                // slider.viewport.append(slider.controls.directionEl);
                slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);
            }
        }

        /**
         * Appends start / stop auto controls to the controls element
         */
        var appendControlsAuto = function(){
            slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + '</a></div>');
            slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + '</a></div>');
            // add the controls to the DOM
            slider.controls.autoEl = $('<div class="bx-controls-auto" />');
            // bind click actions to the controls
            slider.controls.autoEl.delegate('.bx-start', 'click', clickStartBind);
            slider.controls.autoEl.delegate('.bx-stop', 'click', clickStopBind);
            // if autoControlsCombine, insert only the "start" control
            if(slider.settings.autoControlsCombine){
                slider.controls.autoEl.append(slider.controls.start);
            // if autoControlsCombine is false, insert both controls
            }else{
                slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);
            }
            // if auto controls selector was supplied, populate it with the controls
            if(slider.settings.autoControlsSelector){
                $(slider.settings.autoControlsSelector).html(slider.controls.autoEl);
            // if auto controls selector was not supplied, add it after the wrapper
            }else{
                slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);
            }
            // update the auto controls
            updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
        }

        /**
         * Appends image captions to the DOM
         */
        var appendCaptions = function(){
            // cycle through each child
            slider.children.each(function(index){
                // get the image title attribute
                var title = $(this).find('img:first').attr('title');
                // append the caption
                if (title != undefined && ('' + title).length) {
                    $(this).append('<div class="bx-caption"><span>' + title + '</span></div>');
                }
            });
        }

        /**
         * Click next binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickNextBind = function(e){
            // if auto show is running, stop it
            if (slider.settings.auto) el.stopAuto();
            el.goToNextSlide();
            e.preventDefault();
        }

        /**
         * Click prev binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickPrevBind = function(e){
            // if auto show is running, stop it
            if (slider.settings.auto) el.stopAuto();
            el.goToPrevSlide();
            e.preventDefault();
        }

        /**
         * Click start binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickStartBind = function(e){
            el.startAuto();
            e.preventDefault();
        }

        /**
         * Click stop binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickStopBind = function(e){
            el.stopAuto();
            e.preventDefault();
        }

        /**
         * Click pager binding
         *
         * @param e (event)
         *  - DOM event object
         */
        var clickPagerBind = function(e){
            // if auto show is running, stop it
            if (slider.settings.auto) el.stopAuto();
            var pagerLink = $(e.currentTarget);
            var pagerIndex = parseInt(pagerLink.attr('data-slide-index'));
            // if clicked pager link is not active, continue with the goToSlide call
            if(pagerIndex != slider.active.index) el.goToSlide(pagerIndex);
            e.preventDefault();
        }

        /**
         * Updates the pager links with an active class
         *
         * @param slideIndex (int)
         *  - index of slide to make active
         */
        var updatePagerActive = function(slideIndex){
            // if "short" pager type
            var len = slider.children.length; // nb of children
            if(slider.settings.pagerType == 'short'){
                if(slider.settings.maxSlides > 1) {
                    len = Math.ceil(slider.children.length/slider.settings.maxSlides);
                }
                slider.pagerEl.html( (slideIndex + 1) + slider.settings.pagerShortSeparator + len);
                return;
            }
            // remove all pager active classes
            slider.pagerEl.find('a').removeClass('active');
            // apply the active class for all pagers
            slider.pagerEl.each(function(i, el) { $(el).find('a').eq(slideIndex).addClass('active'); });
        }

        /**
         * Performs needed actions after a slide transition
         */
        var updateAfterSlideTransition = function(){
            // if infinte loop is true
            if(slider.settings.infiniteLoop){
                var position = '';
                // first slide
                if(slider.active.index == 0){
                    // set the new position
                    position = slider.children.eq(0).position();
                // carousel, last slide
                }else if(slider.active.index == getPagerQty() - 1 && slider.carousel){
                    position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position();
                // last slide
                }else if(slider.active.index == slider.children.length - 1){
                    position = slider.children.eq(slider.children.length - 1).position();
                }
                if (slider.settings.mode == 'horizontal') { setPositionProperty(-position.left, 'reset', 0);; }
                else if (slider.settings.mode == 'vertical') { setPositionProperty(-position.top, 'reset', 0);; }
            }
            // declare that the transition is complete
            slider.working = false;
            // onSlideAfter callback
            slider.settings.onSlideAfter(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
        }

        /**
         * Updates the auto controls state (either active, or combined switch)
         *
         * @param state (string) "start", "stop"
         *  - the new state of the auto show
         */
        var updateAutoControls = function(state){
            // if autoControlsCombine is true, replace the current control with the new state
            if(slider.settings.autoControlsCombine){
                slider.controls.autoEl.html(slider.controls[state]);
            // if autoControlsCombine is false, apply the "active" class to the appropriate control
            }else{
                slider.controls.autoEl.find('a').removeClass('active');
                slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');
            }
        }

        /**
         * Updates the direction controls (checks if either should be hidden)
         */
        var updateDirectionControls = function(){
            if(getPagerQty() == 1){
                slider.controls.prev.addClass('disabled');
                slider.controls.next.addClass('disabled');
            }else if(!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd){
                // if first slide
                if (slider.active.index == 0){
                    slider.controls.prev.addClass('disabled');
                    slider.controls.next.removeClass('disabled');
                // if last slide
                }else if(slider.active.index == getPagerQty() - 1){
                    slider.controls.next.addClass('disabled');
                    slider.controls.prev.removeClass('disabled');
                // if any slide in the middle
                }else{
                    slider.controls.prev.removeClass('disabled');
                    slider.controls.next.removeClass('disabled');
                }
            }
        }

        /**
         * Initialzes the auto process
         */
        var initAuto = function(){
            // if autoDelay was supplied, launch the auto show using a setTimeout() call
            if(slider.settings.autoDelay > 0){
                var timeout = setTimeout(el.startAuto, slider.settings.autoDelay);
            // if autoDelay was not supplied, start the auto show normally
            }else{
                el.startAuto();
            }
            // if autoHover is requested
            if(slider.settings.autoHover){
                // on el hover
                el.hover(function(){
                    // if the auto show is currently playing (has an active interval)
                    if(slider.interval){
                        // stop the auto show and pass true agument which will prevent control update
                        el.stopAuto(true);
                        // create a new autoPaused value which will be used by the relative "mouseout" event
                        slider.autoPaused = true;
                    }
                }, function(){
                    // if the autoPaused value was created be the prior "mouseover" event
                    if(slider.autoPaused){
                        // start the auto show and pass true agument which will prevent control update
                        el.startAuto(true);
                        // reset the autoPaused value
                        slider.autoPaused = null;
                    }
                });
            }
        }

        /**
         * Initialzes the ticker process
         */
        var initTicker = function(){
            var startPosition = 0;
            // if autoDirection is "next", append a clone of the entire slider
            if(slider.settings.autoDirection == 'next'){
                el.append(slider.children.clone().addClass('bx-clone'));
            // if autoDirection is "prev", prepend a clone of the entire slider, and set the left position
            }else{
                el.prepend(slider.children.clone().addClass('bx-clone'));
                var position = slider.children.first().position();
                startPosition = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
            }
            setPositionProperty(startPosition, 'reset', 0);
            // do not allow controls in ticker mode
            slider.settings.pager = false;
            slider.settings.controls = false;
            slider.settings.autoControls = false;
            // if autoHover is requested
            if(slider.settings.tickerHover && !slider.usingCSS){
                // on el hover
                slider.viewport.hover(function(){
                    el.stop();
                }, function(){
                    // calculate the total width of children (used to calculate the speed ratio)
                    var totalDimens = 0;
                    slider.children.each(function(index){
                      totalDimens += slider.settings.mode == 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
                    });
                    // calculate the speed ratio (used to determine the new speed to finish the paused animation)
                    var ratio = slider.settings.speed / totalDimens;
                    // determine which property to use
                    var property = slider.settings.mode == 'horizontal' ? 'left' : 'top';
                    // calculate the new speed
                    var newSpeed = ratio * (totalDimens - (Math.abs(parseInt(el.css(property)))));
                    tickerLoop(newSpeed);
                });
            }
            // start the ticker loop
            tickerLoop();
        }

        /**
         * Runs a continuous loop, news ticker-style
         */
        var tickerLoop = function(resumeSpeed){
            speed = resumeSpeed ? resumeSpeed : slider.settings.speed;
            var position = {left: 0, top: 0};
            var reset = {left: 0, top: 0};
            // if "next" animate left position to last child, then reset left to 0
            if(slider.settings.autoDirection == 'next'){
                position = el.find('.bx-clone').first().position();
            // if "prev" animate left position to 0, then reset left to first non-clone child
            }else{
                reset = slider.children.first().position();
            }
            var animateProperty = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
            var resetValue = slider.settings.mode == 'horizontal' ? -reset.left : -reset.top;
            var params = {resetValue: resetValue};
            setPositionProperty(animateProperty, 'ticker', speed, params);
        }

        /**
         * Initializes touch events
         */
        var initTouch = function(){
            // initialize object to contain all touch values
            slider.touch = {
                start: {x: 0, y: 0},
                end: {x: 0, y: 0}
            }
            slider.viewport.bind('touchstart', onTouchStart);
        }

        /**
         * Event handler for "touchstart"
         *
         * @param e (event)
         *  - DOM event object
         */
        var onTouchStart = function(e){
            if(slider.working){
                e.preventDefault();
            }else{
                // record the original position when touch starts
                slider.touch.originalPos = el.position();
                var orig = e.originalEvent;
                // record the starting touch x, y coordinates
                slider.touch.start.x = orig.changedTouches[0].pageX;
                slider.touch.start.y = orig.changedTouches[0].pageY;
                // bind a "touchmove" event to the viewport
                slider.viewport.bind('touchmove', onTouchMove);
                // bind a "touchend" event to the viewport
                slider.viewport.bind('touchend', onTouchEnd);
            }
        }

        /**
         * Event handler for "touchmove"
         *
         * @param e (event)
         *  - DOM event object
         */
        var onTouchMove = function(e){
            var orig = e.originalEvent;
            // if scrolling on y axis, do not prevent default
            var xMovement = Math.abs(orig.changedTouches[0].pageX - slider.touch.start.x);
            var yMovement = Math.abs(orig.changedTouches[0].pageY - slider.touch.start.y);
            // x axis swipe
            if((xMovement * 3) > yMovement && slider.settings.preventDefaultSwipeX){
                e.preventDefault();
            // y axis swipe
            }else if((yMovement * 3) > xMovement && slider.settings.preventDefaultSwipeY){
                e.preventDefault();
            }
            if(slider.settings.mode != 'fade' && slider.settings.oneToOneTouch){
                var value = 0;
                // if horizontal, drag along x axis
                if(slider.settings.mode == 'horizontal'){
                    var change = orig.changedTouches[0].pageX - slider.touch.start.x;
                    value = slider.touch.originalPos.left + change;
                // if vertical, drag along y axis
                }else{
                    var change = orig.changedTouches[0].pageY - slider.touch.start.y;
                    value = slider.touch.originalPos.top + change;
                }
                setPositionProperty(value, 'reset', 0);
            }
        }

        /**
         * Event handler for "touchend"
         *
         * @param e (event)
         *  - DOM event object
         */
        var onTouchEnd = function(e){
            slider.viewport.unbind('touchmove', onTouchMove);
            var orig = e.originalEvent;
            var value = 0;
            // record end x, y positions
            slider.touch.end.x = orig.changedTouches[0].pageX;
            slider.touch.end.y = orig.changedTouches[0].pageY;
            // if fade mode, check if absolute x distance clears the threshold
            if(slider.settings.mode == 'fade'){
                var distance = Math.abs(slider.touch.start.x - slider.touch.end.x);
                if(distance >= slider.settings.swipeThreshold){
                    slider.touch.start.x > slider.touch.end.x ? el.goToNextSlide() : el.goToPrevSlide();
                    el.stopAuto();
                }
            // not fade mode
            }else{
                var distance = 0;
                // calculate distance and el's animate property
                if(slider.settings.mode == 'horizontal'){
                    distance = slider.touch.end.x - slider.touch.start.x;
                    value = slider.touch.originalPos.left;
                }else{
                    distance = slider.touch.end.y - slider.touch.start.y;
                    value = slider.touch.originalPos.top;
                }
                // if not infinite loop and first / last slide, do not attempt a slide transition
                if(!slider.settings.infiniteLoop && ((slider.active.index == 0 && distance > 0) || (slider.active.last && distance < 0))){
                    setPositionProperty(value, 'reset', 200);
                }else{
                    // check if distance clears threshold
                    if(Math.abs(distance) >= slider.settings.swipeThreshold){
                        distance < 0 ? el.goToNextSlide() : el.goToPrevSlide();
                        el.stopAuto();
                    }else{
                        // el.animate(property, 200);
                        setPositionProperty(value, 'reset', 200);
                    }
                }
            }
            slider.viewport.unbind('touchend', onTouchEnd);
        }

        /**
         * Window resize event callback
         */
        var resizeWindow = function(e){
            // get the new window dimens (again, thank you IE)
            var windowWidthNew = $(window).width();
            var windowHeightNew = $(window).height();
            // make sure that it is a true window resize
            // *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements
            // are resized. Can you just die already?*
            if(windowWidth != windowWidthNew || windowHeight != windowHeightNew){
                // set the new window dimens
                windowWidth = windowWidthNew;
                windowHeight = windowHeightNew;
                // update all dynamic elements
                el.redrawSlider();
            }
        }

        /**
         * ===================================================================================
         * = PUBLIC FUNCTIONS
         * ===================================================================================
         */

        /**
         * Performs slide transition to the specified slide
         *
         * @param slideIndex (int)
         *  - the destination slide's index (zero-based)
         *
         * @param direction (string)
         *  - INTERNAL USE ONLY - the direction of travel ("prev" / "next")
         */
        el.goToSlide = function(slideIndex, direction){
            // if plugin is currently in motion, ignore request
            if(slider.working || slider.active.index == slideIndex) return;
            // declare that plugin is in motion
            slider.working = true;
            // store the old index
            slider.oldIndex = slider.active.index;
            // if slideIndex is less than zero, set active index to last child (this happens during infinite loop)
            if(slideIndex < 0){
                slider.active.index = getPagerQty() - 1;
            // if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)
            }else if(slideIndex >= getPagerQty()){
                slider.active.index = 0;
            // set active index to requested slide
            }else{
                slider.active.index = slideIndex;
            }
            // onSlideBefore, onSlideNext, onSlidePrev callbacks
            slider.settings.onSlideBefore(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
            if(direction == 'next'){
                slider.settings.onSlideNext(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
            }else if(direction == 'prev'){
                slider.settings.onSlidePrev(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
            }
            // check if last slide
            slider.active.last = slider.active.index >= getPagerQty() - 1;
            // update the pager with active class
            if(slider.settings.pager) updatePagerActive(slider.active.index);
            // // check for direction control update
            if(slider.settings.controls) updateDirectionControls();
            // if slider is set to mode: "fade"
            if(slider.settings.mode == 'fade'){
                // if adaptiveHeight is true and next height is different from current height, animate to the new height
                if(slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()){
                    slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
                }
                // fade out the visible child and reset its z-index value
                slider.children.filter(':visible').fadeOut(slider.settings.speed).css({zIndex: 0});
                // fade in the newly requested slide
                slider.children.eq(slider.active.index).css('zIndex', 51).fadeIn(slider.settings.speed, function(){
                    $(this).css('zIndex', 50);
                    updateAfterSlideTransition();
                });
            // slider mode is not "fade"
            }else{
                // if adaptiveHeight is true and next height is different from current height, animate to the new height
                if(slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()){
                    slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
                }
                var moveBy = 0;
                var position = {left: 0, top: 0};
                // if carousel and not infinite loop
                if(!slider.settings.infiniteLoop && slider.carousel && slider.active.last){
                    if(slider.settings.mode == 'horizontal'){
                        // get the last child position
                        var lastChild = slider.children.eq(slider.children.length - 1);
                        position = lastChild.position();
                        // calculate the position of the last slide
                        moveBy = slider.viewport.width() - lastChild.outerWidth();
                    }else{
                        // get last showing index position
                        var lastShowingIndex = slider.children.length - slider.settings.minSlides;
                        position = slider.children.eq(lastShowingIndex).position();
                    }
                    // horizontal carousel, going previous while on first slide (infiniteLoop mode)
                }else if(slider.carousel && slider.active.last && direction == 'prev'){
                    // get the last child position
                    var eq = slider.settings.moveSlides == 1 ? slider.settings.maxSlides - getMoveBy() : ((getPagerQty() - 1) * getMoveBy()) - (slider.children.length - slider.settings.maxSlides);
                    var lastChild = el.children('.bx-clone').eq(eq);
                    position = lastChild.position();
                // if infinite loop and "Next" is clicked on the last slide
                }else if(direction == 'next' && slider.active.index == 0){
                    // get the last clone position
                    position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();
                    slider.active.last = false;
                // normal non-zero requests
                }else if(slideIndex >= 0){
                    var requestEl = slideIndex * getMoveBy();
                    position = slider.children.eq(requestEl).position();
                }

                /* If the position doesn't exist
                 * (e.g. if you destroy the slider on a next click),
                 * it doesn't throw an error.
                 */
                if ("undefined" !== typeof(position)) {
                    var value = slider.settings.mode == 'horizontal' ? -(position.left - moveBy) : -position.top;
                    // plugin values to be animated
                    setPositionProperty(value, 'slide', slider.settings.speed);
                }
            }
        }

        /**
         * Transitions to the next slide in the show
         */
        el.goToNextSlide = function(){
            // if infiniteLoop is false and last page is showing, disregard call
            if (!slider.settings.infiniteLoop && slider.active.last) return;
            var pagerIndex = parseInt(slider.active.index) + 1;
            el.goToSlide(pagerIndex, 'next');
        }

        /**
         * Transitions to the prev slide in the show
         */
        el.goToPrevSlide = function(){
            // if infiniteLoop is false and last page is showing, disregard call
            if (!slider.settings.infiniteLoop && slider.active.index == 0) return;
            var pagerIndex = parseInt(slider.active.index) - 1;
            el.goToSlide(pagerIndex, 'prev');
        }

        /**
         * Starts the auto show
         *
         * @param preventControlUpdate (boolean)
         *  - if true, auto controls state will not be updated
         */
        el.startAuto = function(preventControlUpdate){
            // if an interval already exists, disregard call
            if(slider.interval) return;
            // create an interval
            slider.interval = setInterval(function(){
                slider.settings.autoDirection == 'next' ? el.goToNextSlide() : el.goToPrevSlide();
            }, slider.settings.pause);
            // if auto controls are displayed and preventControlUpdate is not true
            if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('stop');
        }

        /**
         * Stops the auto show
         *
         * @param preventControlUpdate (boolean)
         *  - if true, auto controls state will not be updated
         */
        el.stopAuto = function(preventControlUpdate){
            // if no interval exists, disregard call
            if(!slider.interval) return;
            // clear the interval
            clearInterval(slider.interval);
            slider.interval = null;
            // if auto controls are displayed and preventControlUpdate is not true
            if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('start');
        }

        /**
         * Returns current slide index (zero-based)
         */
        el.getCurrentSlide = function(){
            return slider.active.index;
        }

        /**
         * Returns number of slides in show
         */
        el.getSlideCount = function(){
            return slider.children.length;
        }

        /**
         * Update all dynamic slider elements
         */
        el.redrawSlider = function(){
            // resize all children in ratio to new screen size
            slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth());
            // adjust the height
            slider.viewport.css('height', getViewportHeight());
            // update the slide position
            if(!slider.settings.ticker) setSlidePosition();
            // if active.last was true before the screen resize, we want
            // to keep it last no matter what screen size we end on
            if (slider.active.last) slider.active.index = getPagerQty() - 1;
            // if the active index (page) no longer exists due to the resize, simply set the index as last
            if (slider.active.index >= getPagerQty()) slider.active.last = true;
            // if a pager is being displayed and a custom pager is not being used, update it
            if(slider.settings.pager && !slider.settings.pagerCustom){
                populatePager();
                updatePagerActive(slider.active.index);
            }
        }

        /**
         * Destroy the current instance of the slider (revert everything back to original state)
         */
        el.destroySlider = function(){
            // don't do anything if slider has already been destroyed
            if(!slider.initialized) return;
            slider.initialized = false;
            $('.bx-clone', this).remove();
            slider.children.each(function() {
                $(this).data("origStyle") != undefined ? $(this).attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
            });
            $(this).data("origStyle") != undefined ? this.attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
            $(this).unwrap().unwrap();
            if(slider.controls.el) slider.controls.el.remove();
            if(slider.controls.next) slider.controls.next.remove();
            if(slider.controls.prev) slider.controls.prev.remove();
            if(slider.pagerEl) slider.pagerEl.remove();
            $('.bx-caption', this).remove();
            if(slider.controls.autoEl) slider.controls.autoEl.remove();
            clearInterval(slider.interval);
            if(slider.settings.responsive) $(window).unbind('resize', resizeWindow);
        }

        /**
         * Reload the slider (revert all DOM changes, and re-initialize)
         */
        el.reloadSlider = function(settings){
            if (settings != undefined) options = settings;
            el.destroySlider();
            init();
        }

        init();

        // returns the current jQuery object
        return this;
    }

})(jQuery);
;(function(win){var $=win.jQuery,PB=win.PB||{};function PBSlider($elem,options){var _defaultOptions={controls:false,pager:false,speed:250,autoHover:true,adaptiveHeight:false},_pluginOptions=$.extend(_defaultOptions,$elem.data(),options),_libraryInstance=$elem.bxSlider(_pluginOptions);this.next=function(){_libraryInstance.goToNextSlide();};this.prev=function(){_libraryInstance.goToPrevSlide();};this.goTo=function(index){_libraryInstance.goToSlide(index);};this.stop=function(){_libraryInstance.stopAuto();};this.play=function(){_libraryInstance.startAuto();};this.getCurrentSlide=function(){return _libraryInstance.getCurrentSlide();};this.getSlideCount=function(){return _libraryInstance.getSlideCount();};}
PB.PBSlider=PBSlider;win.PB=PB;}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB;PB.Core.register('featured-tag',function(){var FeaturedTag={$ele:''};FeaturedTag.init=function(){if(this.$ele===''){this.$ele=$('.js-featured-tag-slider');}
return new PB.PBSlider(this.$ele,{controls:true,slideMargin:10,slideWidth:190,maxSlides:3,moveSlides:3});};return{init:function(){FeaturedTag.init();}};});}(window));
;(function(win){'use strict';var $=win.jQuery,Modernizr=win.Modernizr,CR=win.CR,PB=win.PB,SidebarLoader=PB.SidebarLoader,PEBBLEBED_MEDIA_JS=PB.WP.pluginsUrl+'/pebblebed/media/js',THEME_JS=PB.WP.themeUrl+'/js',THEME_JS_LIBS=THEME_JS+'/libs',THEME_JS_UTILS=THEME_JS+'/utils',THEME_JS_MODULES=THEME_JS+'/modules',isDesktop,isIE9orBelow,isHome,isSingle,isCategoryLP,isEntertainmentLP,isSubNavLP,hasFeaturedTag;function initRightSidebar(){var $right;if(CR.mq!=='mobile'){$right=$('#js-article-right');SidebarLoader.load('column_right',$right);}}
function initArticleMobileAd(){var $mobilead;if(CR.mq!=='desktop'){$mobilead=$('#js-article-mobile-ad');SidebarLoader.load('article_ad_mobile',$mobilead);}}
$(function(){var $html=$('html'),$featuredTag=$('.js-featured-tag');isDesktop=CR.mq==='desktop';isIE9orBelow=($html.hasClass('ie9')||$html.hasClass('lt-ie9'));isHome=($('body.home').length>0);isSingle=($('body.single-post').length>0);isCategoryLP=($('body.category').length>0);isEntertainmentLP=($('body.category-entertainment').length>0);isSubNavLP=!($('.subcategory-item:first').hasClass('current'));hasFeaturedTag=($featuredTag.length>0);PB.Core.start('body-ads');PB.Core.start('leaderboard-ad');PB.Core.start('searchform');PB.Core.start('mobile-navigation',CR.mq);Modernizr.load({test:isSingle,yep:THEME_JS_MODULES+'/pb.transparency-setter.js',callback:function(){PB.Core.start('transparency-setter');}});Modernizr.load({test:isCategoryLP&&!isEntertainmentLP&&isSubNavLP,yep:THEME_JS_MODULES+'/pb.jump-to-listing.js',callback:function(){PB.Core.start('jump-to-listing');}});Modernizr.load({test:isHome&&isDesktop,yep:[THEME_JS_LIBS+'/bootstrap-carousel.js',THEME_JS_MODULES+'/pb.rich-most-craved.js'],callback:function(url){if(url===THEME_JS_MODULES+'/pb.rich-most-craved.js'){PB.Core.start('rich-most-craved');}}});Modernizr.load({test:isDesktop,yep:[THEME_JS_UTILS+'/pb.jquery-hoverpost.js',THEME_JS_MODULES+'/pb.post-highlighter.js',],callback:function(url){if(url===THEME_JS_MODULES+'/pb.post-highlighter.js'){PB.Core.start('post-highlighter');}}});Modernizr.load({test:isIE9orBelow,yep:PEBBLEBED_MEDIA_JS+'/jquery.placeholder.min.js',callback:function(){$('input, textarea').placeholder();}});Modernizr.load({test:!isDesktop&&isHome,yep:THEME_JS_MODULES+'/pb.order-content.js',callback:function(){PB.Core.start('switch-order');}});if(CR.mq==='desktop'){PB.Core.start('navigation');}
if(['tablet','desktop'].indexOf(CR.mq)!==-1&&hasFeaturedTag){PB.Core.start('featured-tag');}});initRightSidebar();initArticleMobileAd();}(window));
;(function(win){'use strict';var $=win.jQuery,PB=win.PB,articleContainer=$('.js-article-content');PB.Core.register('ingage-template-setup',function(){return{init:function(){if(articleContainer.length>0){$('.js-article-content p').eq(2).append("<div id='demodiv'></div>");}}};});}(window));